AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda Multithreading Experiment
Parameters:
    ExperimentBucketName:
        Type: String
        Description: Name for the bucket that will be used for the experiment (experiment packages and output).
Resources:
    HelpersLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            Content:
                S3Bucket: !Ref ExperimentBucketName
                S3Key: LambdaLayers/Helpers.zip
            Description: Centralized DynamoDB writer for all created functions
            LayerName: LambdaMTExp_Helpers
            CompatibleArchitectures:
                - x86_64
                - arm64
            CompatibleRuntimes:
                - python3.6
                - python3.7
                - python3.8
                - python3.9
    CFCustomResourceHelperLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            Content:
                S3Bucket: !Ref ExperimentBucketName
                S3Key: LambdaLayers/CF_CustomResourceHelper_py39.zip
            Description: Lambda-backed custom resource library for CloudFormation
            LayerName: LambdaMTExp_CF_CustomResourceHelper
            CompatibleArchitectures:
                - x86_64
                - arm64
            CompatibleRuntimes:
                - python3.6
                - python3.7
                - python3.8
                - python3.9
    DefaultLambdaServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement: 
                    - 
                        Effect: Allow
                        Principal:
                            Service: 
                                - 'lambda.amazonaws.com'
                        Action: 'sts:AssumeRole'
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
                - 'arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess'
            Policies:
                - 
                    PolicyName: PolicyForDefaultLambdaServiceRole
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Sid: VisualEditor0
                                Effect: Allow
                                Action:
                                    - 'iam:GetRole'
                                    - 'dynamodb:BatchGetItem'
                                    - 'dynamodb:BatchWriteItem'
                                    - 'dynamodb:ConditionCheckItem'
                                    - 'dynamodb:PutItem'
                                    - 'dynamodb:DeleteItem'
                                    - 'dynamodb:GetItem'
                                    - 'dynamodb:Scan'
                                    - 'dynamodb:Query'
                                    - 'dynamodb:UpdateItem'
                                Resource: 
                                    - !Join [ "", [ "arn:aws:dynamodb:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":", "table/", !Ref DynamoDBTable] ]
    DataProcessor:
        Type: AWS::Serverless::Function
        Properties:
            Runtime: python3.9
            Handler: DataProcessor.lambda_handler
            CodeUri:
                Bucket: !Ref ExperimentBucketName
                Key: Lambdas/DataProcessor.zip
            Environment:
                Variables:
                    S3Bucket: !Ref ExperimentBucketName
            Policies:
                - AmazonS3FullAccess
                - AWSLambdaBasicExecutionRole
                - AmazonSSMReadOnlyAccess
            Timeout: 900
            MemorySize: 1024
            Architectures:
                - arm64
    LambdaCreator:
        Type: AWS::Serverless::Function
        Properties:
            Runtime: python3.9
            Handler: LambdaCreator.lambda_handler
            CodeUri:
                Bucket: !Ref ExperimentBucketName
                Key: Lambdas/LambdaCreator.zip
            Environment:
                Variables:
                    LambdaMTExp_Layer_ARN: !Ref HelpersLayer
                    S3Bucket: !Ref ExperimentBucketName
                    LambdaServiceRole: !GetAtt DefaultLambdaServiceRole.Arn
            Policies:
                - AmazonS3FullAccess
                - AWSLambda_FullAccess
                - AmazonSSMReadOnlyAccess
            Timeout: 900
            MemorySize: 10240
            Architectures:
                - arm64
            Layers:
                - !Ref CFCustomResourceHelperLayer
        DependsOn:
            - ExpSettings
            - HelpersLayer
    Invoker:
        Type: AWS::Serverless::Function
        Properties:
            Runtime: python3.9
            Handler: Invoker.lambda_handler
            CodeUri:
                Bucket: !Ref ExperimentBucketName
                Key: Lambdas/Invoker.zip
            Policies:
                - AWSLambda_FullAccess
                - AmazonSSMReadOnlyAccess
            Timeout: 600
            Architectures:
                - arm64
    ParamDDBTable:
        Type: AWS::SSM::Parameter
        Properties: 
            Name: LambdaMTExp_DDB_Table
            Description: DDB Table for the Lambda Multithreading experiment
            Type: String
            Value: LambdaMTExp
    ExpSettings:
        Type: AWS::SSM::Parameter
        Properties: 
            Name: LambdaMTExp_Settings
            Description: Main config for the experiment (lambda config and runtimes to test)
            Type: String
            Value: '{ "Runtimes": ["python3.9"], "Architectures": ["arm64", "x86_64"], "MemorySizes": ["128", "256", "512", "768", "1024", "1280", "1536", "1792", "2048", "2304", "2560", "2816", "3072", "3328", "3584", "3840", "4096", "4352", "4608", "4864", "5120", "5376", "5632", "5888", "6144", "6400", "6656", "6912", "7168", "7424", "7680", "7936", "8192", "8448", "8704", "8960", "9216", "9472", "9728", "9984", "10240"], "Workers": [1, 2, 3, 4, 5, 6] }'
    LambdaCreatorRun:
        Type: AWS::CloudFormation::CustomResource
        Properties:
            ServiceToken: !GetAtt LambdaCreator.Arn
            UpdateToken: RandomTokenFromBuildScript
            Remarks: This will trigger the experiment's Lambda creator, to deploy all the different lambda functions for the experiment (different runtimes and config, same code)
        DependsOn:
            - LambdaCreator
    DynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: LambdaMTExp
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
                -
                    AttributeName: pk
                    AttributeType: S
                -
                    AttributeName: sk
                    AttributeType: S
            KeySchema:
                -
                    AttributeName: pk
                    KeyType: HASH
                -
                    AttributeName: sk
                    KeyType: RANGE
